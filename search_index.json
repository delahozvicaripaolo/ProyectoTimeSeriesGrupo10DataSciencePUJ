[["index.html", "Faros del Mercado: Índices Bursátiles que Guían la Economía Mundial. Chapter 1 Descripción del proceso y justificación del análisis de los valores bursátiles en los principales mercados globales: Estados Unidos, Europa y Asia. 1.1 Descripción del proyecto. 1.2 Justificación e importancia del análisis.", " Faros del Mercado: Índices Bursátiles que Guían la Economía Mundial. Paolo De La Hoz Vicari, Genjis Ossa Gonzales 2025-06-15 Chapter 1 Descripción del proceso y justificación del análisis de los valores bursátiles en los principales mercados globales: Estados Unidos, Europa y Asia. 1.1 Descripción del proyecto. El proyecto se centrará en tres regiones clave: Estados Unidos (S&amp;P 500, NASDAQ, Dow Jones), Europa (DAX, CAC 40, FTSE 100) y Asia (Nikkei 225, Hang Seng, Shanghai Composite). Para cada índice, se recopilará información histórica diaria sobre precios de cierre, volumen y variación porcentual. Posteriormente, se realizará una limpieza y estructuración de los datos, seguida de un análisis exploratorio para identificar patrones, estacionalidades y correlaciones. A partir de esto, se aplicarán modelos de pronóstico como ARIMA, Prophet o técnicas de aprendizaje automático para estimar las tendencias futuras. El objetivo es generar una herramienta que permita anticipar cambios significativos y pronosticar valores en los mercados para la toma de decisiones. 1.2 Justificación e importancia del análisis. En el actual entorno económico, caracterizado por una creciente interconexión y volatilidad, el análisis y pronóstico de los valores de acciones en los principales mercados financieros es esencial para comprender las dinámicas económicas internacionales, anticipar crisis, identificar oportunidades de inversión y formular políticas económicas informadas.El análisis de los valores bursátiles en los principales mercados financieros (Estados Unidos, Europa y Asia) es fundamental para la toma de decisiones estratégicas en contextos económicos globalizados. Estos mercados, representan los polos financieros más influyentes del mundo, cuyas dinámicas afectan directa e indirectamente a las economías emergentes, al comercio internacional y a la inversión institucional y minorista. El análisis y pronóstico de estos valores permite anticipar tendencias, gestionar riesgos, optimizar carteras de inversión, comprender la interacción entre factores macroeconómicos (PIB, inflación, tasas de interés), eventos exógenos (guerras, pandemias, desastres naturales) y dinámicas propias de cada región (regulaciones, política monetaria, innovación tecnológica). Siendo una herramienta esencial tanto para inversores individuales como para instituciones financieras globales. Además, brinda información clave sobre la salud económica y la proyección futura de regiones que representan más del 75% del PIB mundial. Esta información no solo es clave para inversionistas, sino también para instituciones públicas y privadas que buscan estabilidad financiera, planificación a largo plazo y toma de decisiones estratégicas. En el caso de Estados Unidos, el mercado bursátil (representado por índices como el S&amp;P 500, NASDAQ y Dow Jones) es considerado un barómetro global de confianza económica y tecnológica. Su influencia es tal que las decisiones de la Reserva Federal o los resultados trimestrales de empresas como Apple o Microsoft pueden generar reacciones en cadena en los demás continentes. Europa, a través de bolsas como la de Frankfurt (DAX), París (CAC 40) o Londres (FTSE 100), representa un mercado con alta diversificación industrial, energética y financiera. Su relevancia radica en ser un punto de referencia para políticas regulatorias, estabilidad monetaria (especialmente en la zona euro) y tensiones geopolíticas que afectan la confianza de los inversionistas. Finalmente, Asia, con focos principales en Japón (Nikkei 225), China (Shanghai Composite) y Hong Kong (Hang Seng), constituye el eje de crecimiento económico más dinámico. China en particular, como segunda economía mundial, tiene un impacto decisivo en cadenas de suministro, comercio exterior y mercados emergentes. Principales Mercados Bursatiles "],["referencias.html", "Chapter 2 Referencias", " Chapter 2 Referencias Bloomberg Markets: https://www.bloomberg.com/markets Yahoo Finance: https://finance.yahoo.com World Bank Data: https://data.worldbank.org Financial Times – Markets: https://www.ft.com/markets "],["desarrollo-actividad-2..html", "Chapter 3 Desarrollo Actividad 2. 3.1 Preprocesamiento de datos. 3.2 Gráfico de evolución histórica de todos los índices. 3.3 Promedios Móviles 3.4 AutoCorrelación ACF 3.5 Descomposición de serie de tiempo. 3.6 Tabla de resumen con tendencia, estacionalidad y ruido; para todos los indices. 3.7 Mapa de calor", " Chapter 3 Desarrollo Actividad 2. 3.1 Preprocesamiento de datos. 3.1.1 Cargar las librerías necesarias Code # Configuración global para los chunks knitr::opts_chunk$set( fig.path = &quot;figures/&quot;, # Carpeta donde se guardan los gráficos echo = TRUE ) library(quantmod) # Para descargar datos financieros library(dplyr) # Para manipular datos library(zoo) # Para series de tiempo basadas en fechas library(ggplot2) # Para gráficos library(tidyr) # Para transformar los datos library(urca) library(tseries) library(plotly) library(forecast) library(Metrics) library(prophet) 3.1.2 Definimos los índices bursátiles de interés (Yahoo Finance symbols). Code indices &lt;- c(&quot;^GSPC&quot;, &quot;^DJI&quot;, &quot;^IXIC&quot;, &quot;^GDAXI&quot;, &quot;^FCHI&quot;, &quot;^FTSE&quot;, &quot;^N225&quot;, &quot;^HSI&quot;, &quot;000001.SS&quot;) 3.1.3 Descargamos los datos de Yahoo Finance desde el 2019. Code lista_indices &lt;- lapply(indices, function(ticker) { getSymbols(ticker, src = &quot;yahoo&quot;, from = &quot;2019-01-01&quot;, auto.assign = FALSE) }) 3.1.4 Asignamos nombres a cada índice. Code nombres_indices &lt;- c(&quot;SP500&quot;, &quot;DowJones&quot;, &quot;Nasdaq&quot;, &quot;DAX&quot;, &quot;CAC40&quot;, &quot;FTSE100&quot;, &quot;Nikkei225&quot;, &quot;HangSeng&quot;, &quot;ShanghaiComposite&quot;) names(lista_indices) &lt;- nombres_indices 3.1.5 Extraemos solo los precios de cierre y convertimos cada serie en un objeto zoo. Code cierres_zoo &lt;- lapply(lista_indices, function(serie) { zoo(Cl(serie)) # Cl() extrae el &#39;Close&#39; y zoo() lo convierte a objeto de series de tiempo }) 3.1.6 Unimos todas las series zoo en un solo objeto. Code cierres_merged &lt;- do.call(merge, cierres_zoo) 3.1.7 Visualizamos la estructura. Code head(cierres_merged) ## GSPC.Close DJI.Close IXIC.Close GDAXI.Close FCHI.Close FTSE.Close ## 2019-01-02 2510.03 23346.24 6665.94 10580.19 4689.39 6734.2 ## 2019-01-03 2447.89 22686.22 6463.50 10416.66 4611.49 6692.7 ## 2019-01-04 2531.94 23433.16 6738.86 10767.69 4737.12 6837.4 ## 2019-01-07 2549.69 23531.35 6823.47 10747.81 4719.17 6810.9 ## 2019-01-08 2574.41 23787.45 6897.00 10803.98 4773.27 6861.6 ## 2019-01-09 2584.96 23879.12 6957.08 10893.32 4813.58 6906.6 ## N225.Close HSI.Close 000001.SS.Close ## 2019-01-02 NA 25130.35 2465.291 ## 2019-01-03 NA 25064.36 2464.363 ## 2019-01-04 19561.96 25626.03 2514.868 ## 2019-01-07 20038.97 25835.70 2533.089 ## 2019-01-08 20204.04 25875.45 2526.462 ## 2019-01-09 20427.06 26462.32 2544.345 3.2 Gráfico de evolución histórica de todos los índices. 3.2.1 Convertir a un data frame para ggplot y reestructuración en formato largo para gráficos. Code cierres_df &lt;- data.frame(Date = index(cierres_merged), coredata(cierres_merged)) cierres_long &lt;- cierres_df %&gt;% pivot_longer(cols = -Date, names_to = &quot;Indice&quot;, values_to = &quot;Cierre&quot;) 3.2.2 Gráfico. El gráfico muestra la evolución diaria de los precios de cierre de los principales índices bursátiles a nivel mundial desde 2019 hasta la fecha actual. Cada línea representa un índice diferente, con escalas independientes de precio en el eje Y y fechas en el eje X. Eje X: Fecha (de 2019 a 2025). Eje Y: Precio de cierre (escala real de cada índice). Variables representadas: SP500, Dow Jones, Nasdaq, DAX, CAC40, FTSE100, Nikkei225, Hang Seng, Shanghai Composite. Code ggplot(cierres_long, aes(x = Date, y = Cierre, color = Indice)) + geom_line() + labs( title = &quot;Evolución histórica de índices bursátiles (2019-Actualidad)&quot;, x = &quot;Fecha&quot;, y = &quot;Precio de Cierre&quot;, color = &quot;Índice&quot; ) + theme_minimal() 3.3 Promedios Móviles 3.3.1 Aplicamos promedio móvil (7, 30, 90 días) para cada índice. Code promedios_moviles &lt;- lapply(cierres_zoo, function(serie) { data.frame( Fecha = index(serie), Original = as.numeric(serie), MA_7 = as.numeric(rollmean(serie, k = 7, fill = NA, align = &quot;right&quot;)), MA_30 = as.numeric(rollmean(serie, k = 30, fill = NA, align = &quot;right&quot;)), MA_90 = as.numeric(rollmean(serie, k = 90, fill = NA, align = &quot;right&quot;)) ) }) 3.3.2 Asignamos los nombres de los indices Code names(promedios_moviles) &lt;- nombres_indices 3.3.3 Graficamos los promedios móviles en todos los indices con (7, 30, 90 días) SP500: Crecimiento fuerte post-pandemia, promedios móviles confirman tendencia alcista estructural, recuperación rápida tras caídas. Dow Jones: Crecimiento sostenido, mayor sensibilidad a choques globales, MA_90 actúa como soporte de tendencia. Nasdaq: Expansión explosiva durante 2020-2022, correcciones posteriores, fuerte volatilidad de corto plazo. DAX: Recuperación sólida, crecimiento más moderado que SP500, volatilidad controlada en 2023-2024. CAC40: Crecimiento progresivo, recuperación fuerte post-pandemia, estabilidad pese a contexto europeo incierto. FTSE100: Recuperación más lenta, crecimiento más estable pero menos acelerado, reflejando impacto de Brexit y COVID-19. Nikkei225: Crecimiento firme y constante, volatilidad moderada, estabilidad asiática frente a shocks externos. HangSeng: Tendencia decreciente persistente, afectado por tensiones políticas y regulación, no logra recuperación estructural. Shanghai Composite: Oscilaciones cíclicas sin tendencia fuerte, movimientos suaves ligados a política económica interna. Code graficar_promedios_moviles &lt;- function(df, nombre_indice) { df_long &lt;- df %&gt;% pivot_longer(cols = c(&quot;Original&quot;, &quot;MA_7&quot;, &quot;MA_30&quot;, &quot;MA_90&quot;), names_to = &quot;Serie&quot;, values_to = &quot;Valor&quot;) ggplot(df_long, aes(x = Fecha, y = Valor, color = Serie)) + geom_line() + labs( title = paste(nombre_indice, &quot;- Evolución y Promedios Móviles (7, 30, 90 días)&quot;), x = &quot;Fecha&quot;, y = &quot;Precio&quot;, color = &quot;Serie&quot; ) + theme_minimal() } for (indice in nombres_indices) { print(graficar_promedios_moviles(promedios_moviles[[indice]], indice)) } 3.4 AutoCorrelación ACF 3.4.1 Graficamos la autocorrelación (ACF) en todos los indices. SP500: Presenta autocorrelaciones extremadamente altas en todos los lags. Indica muy alta dependencia temporal, el precio de hoy está casi totalmente explicado por el precio de ayer, anteayer, etc. DowJones: Patrón idéntico al SP500, autocorrelaciones cercanas a 1 hasta el lag 30. Confirma fuerte persistencia y memoria de largo plazo en el comportamiento de precios. Nasdaq: Igual que SP500 y DowJones, persistencia total en los precios diarios. Movimiento fuertemente dependiente de valores anteriores. Alta estabilidad interna. DAX: Alta autocorrelación, pero comienza a decrecer muy lentamente conforme aumenta el lag. Muestra persistencia, aunque ligeramente menos rígida que en índices estadounidenses. CAC40: Comportamiento muy similar al DAX con alta autocorrelación inicial, pero con una leve pendiente descendente a partir del lag 10. Indica ligero debilitamiento de la dependencia en el tiempo. FTSE100: Alta autocorrelación, pero con una pendiente descendente más pronunciada que en DAX o CAC40. La dependencia de precios pasados existe pero se va diluyendo más rápido. Nikkei225: Persistencia fuerte (autocorrelaciones cercanas a 1), aunque ligeramente más “sueltas” que en los mercados occidentales. Los precios tienden a ser explicados por valores pasados, pero hay algo más de ruido. HangSeng: Alta autocorrelación inicial, pero decayendo progresivamente con el lag. Refleja una memoria de precios, aunque menos estable y más volátil que SP500 o DowJones. Shanghai Composite: Es el único donde la autocorrelación desciende de forma continua y más marcada a medida que crece el lag. Esto indica que la memoria de los precios se erosiona rápidamente en China. Mayor aleatoriedad y menor persistencia estructural en los precios. Code graficar_acf &lt;- function(serie, nombre_indice) { serie_sin_na &lt;- na.omit(serie) # 1. Eliminar los valores faltantes (NA) acf(coredata(serie_sin_na), # 2. Calcula autocorrelaciones lag.max = 30, # 3. Mide autocorrelaciones hasta 30 rezagos (lags) main = paste(&quot;Autocorrelación (ACF) -&quot;, nombre_indice)) # 4. Título del gráfico } # Aplicar la función a todos los índices for (indice in nombres_indices) { graficar_acf(cierres_zoo[[indice]], indice) } 3.5 Descomposición de serie de tiempo. 3.5.1 Descomponemos y graficamos los indices bursatiles utilizando la forma clasica y STL con pasos de limpieza e implementación. Code descomponer_y_graficar &lt;- function(serie_zoo, nombre_indice) { # Eliminamos NA serie_limpia &lt;- na.omit(serie_zoo) # Convertimos a vector numérico puro valores_numericos &lt;- as.numeric(serie_limpia) # Convertimos a objeto ts serie_ts &lt;- ts(valores_numericos, start = c(2019, 1), frequency = 252) # Graficamos descomposición clásica plot(decompose(serie_ts)) mtext(paste(&quot;Descomposición Clásica -&quot;, nombre_indice), side = 3, line = 1, cex = 1.5) # Graficamos descomposición STL plot(stl(serie_ts, s.window = &quot;periodic&quot;)) mtext(paste(&quot;Descomposición STL -&quot;, nombre_indice), side = 3, line = 1, cex = 1.5) } # Aplicamos la función a todos los índices for (indice in nombres_indices) { descomponer_y_graficar(cierres_zoo[[indice]], indice) } 3.6 Tabla de resumen con tendencia, estacionalidad y ruido; para todos los indices. Code analizar_comportamiento &lt;- function(serie_zoo) { serie_limpia &lt;- na.omit(serie_zoo) # Validar que tenga suficientes datos if (length(serie_limpia) &lt; 30) { return(c(Tendencia = NA, Estacionalidad = NA, Ruido = NA)) } valores &lt;- as.numeric(serie_limpia) ts_serie &lt;- ts(valores, start = c(2019, 1), frequency = 252) # Intentar descomposición STL descomposicion &lt;- tryCatch({ stl(ts_serie, s.window = &quot;periodic&quot;) }, error = function(e) { return(NULL) }) if (is.null(descomposicion)) { return(c(Tendencia = NA, Estacionalidad = NA, Ruido = NA)) } trend &lt;- descomposicion$time.series[, &quot;trend&quot;] seasonal &lt;- descomposicion$time.series[, &quot;seasonal&quot;] remainder &lt;- descomposicion$time.series[, &quot;remainder&quot;] # Validar que trend tenga al menos dos valores válidos if (sum(!is.na(trend)) &lt; 2) { return(c(Tendencia = NA, Estacionalidad = NA, Ruido = NA)) } # Extraer extremos no NA para la tendencia primer_valido &lt;- trend[which(!is.na(trend))[1]] ultimo_valido &lt;- trend[rev(which(!is.na(trend)))[1]] media_trend &lt;- mean(trend, na.rm = TRUE) # Calcular cambio de tendencia de forma segura cambio_tendencia &lt;- (ultimo_valido - primer_valido) / media_trend if (is.na(cambio_tendencia)) { tendencia_eval &lt;- NA } else if (abs(cambio_tendencia) &gt; 0.1) { tendencia_eval &lt;- ifelse(cambio_tendencia &gt; 0, &quot;Creciente&quot;, &quot;Decreciente&quot;) } else { tendencia_eval &lt;- &quot;Estable&quot; } promedio_nivel &lt;- mean(valores, na.rm = TRUE) amplitud_estacional &lt;- max(seasonal, na.rm = TRUE) - min(seasonal, na.rm = TRUE) estacionalidad_eval &lt;- if ((amplitud_estacional / promedio_nivel) &gt; 0.05) { &quot;Fuerte&quot; } else { &quot;Débil&quot; } sd_ruido &lt;- sd(remainder, na.rm = TRUE) ruido_eval &lt;- if ((sd_ruido / promedio_nivel) &gt; 0.05) { &quot;Alto&quot; } else { &quot;Moderado&quot; } return(c(Tendencia = tendencia_eval, Estacionalidad = estacionalidad_eval, Ruido = ruido_eval)) } # Aplicar la función a todos los índices resumen_automatico &lt;- t(sapply(cierres_zoo, analizar_comportamiento)) # Convertir a data frame con nombres claros resumen_automatico_df &lt;- data.frame( Indice = rownames(resumen_automatico), Tendencia = resumen_automatico[, &quot;Tendencia&quot;], Estacionalidad = resumen_automatico[, &quot;Estacionalidad&quot;], Ruido = resumen_automatico[, &quot;Ruido&quot;], row.names = NULL ) # Mostrar tabla knitr::kable( resumen_automatico_df, caption = &quot;Resumen automático de la tendencia, estacionalidad y ruido observados por índice (basado en descomposición STL).&quot; ) Table 3.1: Resumen automático de la tendencia, estacionalidad y ruido observados por índice (basado en descomposición STL). Indice Tendencia Estacionalidad Ruido SP500 Creciente Fuerte Moderado DowJones Creciente Fuerte Moderado Nasdaq Creciente Fuerte Moderado DAX Creciente Fuerte Moderado CAC40 Creciente Fuerte Moderado FTSE100 Creciente Fuerte Moderado Nikkei225 Creciente Fuerte Moderado HangSeng Decreciente Fuerte Moderado ShanghaiComposite Creciente Fuerte Moderado 3.7 Mapa de calor Code # Usamos el resumen automático que ya creamos resumen_mapa &lt;- resumen_automatico_df # Codificar las variables cualitativas a valores numéricos resumen_mapa_numeric &lt;- resumen_mapa %&gt;% mutate( Tendencia = case_when( Tendencia == &quot;Creciente&quot; ~ 1, Tendencia == &quot;Decreciente&quot; ~ -1, Tendencia == &quot;Estable&quot; ~ 0, TRUE ~ NA_real_ ), Estacionalidad = case_when( Estacionalidad == &quot;Fuerte&quot; ~ 1, Estacionalidad == &quot;Débil&quot; ~ 0, TRUE ~ NA_real_ ), Ruido = case_when( Ruido == &quot;Alto&quot; ~ 1, Ruido == &quot;Moderado&quot; ~ 0, TRUE ~ NA_real_ ) ) # Reorganizar el dataframe en formato largo para ggplot resumen_long &lt;- resumen_mapa_numeric %&gt;% pivot_longer(cols = c(Tendencia, Estacionalidad, Ruido), names_to = &quot;Caracteristica&quot;, values_to = &quot;Valor&quot;) # Crear el Heatmap ggplot(resumen_long, aes(x = Caracteristica, y = Indice, fill = Valor)) + geom_tile(color = &quot;white&quot;) + scale_fill_gradient2( low = &quot;red&quot;, mid = &quot;white&quot;, high = &quot;green&quot;, midpoint = 0, limits = c(-1, 1), name = &quot;Nivel&quot; ) + labs( title = &quot;Mapa de Calor: Tendencia, Estacionalidad y Ruido por Índice&quot;, x = &quot;Componente&quot;, y = &quot;Índice Bursátil&quot; ) + theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) "],["desarrollo-actividad-3..html", "Chapter 4 Desarrollo Actividad 3. 4.1 Validación de supuestos e implementación de transformaciones requeridas en las series. 4.2 Tabla de resumen.", " Chapter 4 Desarrollo Actividad 3. 4.1 Validación de supuestos e implementación de transformaciones requeridas en las series. 4.1.1 Procesos implementados. Antes de aplicar modelos de pronóstico, es esencial garantizar que las series de tiempo cumplan ciertos supuestos que permiten una estimación confiable y precisa. En esta etapa del análisis, nos enfocamos en evaluar tres aspectos fundamentales de cada índice bursátil: variabilidad relativa, estabilidad estadística (estacionariedad) y la necesidad de transformaciones. 1. Análisis de la Variabilidad Relativa. Cada serie temporal fue evaluada con base en su coeficiente de variación (CV), que representa la relación entre la desviación estándar y la media de la serie. Este valor permite determinar si la serie presenta heterocedasticidad, es decir, si su variabilidad aumenta proporcionalmente con su nivel. Criterio aplicado: Si el coeficiente de variación es mayor a 0.2, se considera que la serie tiene una alta variabilidad relativa y, por tanto, es candidata a una transformación logarítmica. 2. Transformación Logarítmica. Cuando una serie mostró un CV &gt; 0.2, se aplicó una transformación logarítmica. Esta transformación tiene como objetivo estabilizar la varianza, lo cual es crucial para mantener la consistencia de los modelos predictivos. La transformación convierte cambios absolutos crecientes en cambios relativos constantes, facilitando la detección de patrones. Resultado: En los índices SP500, Nasdaq y Nikkei225, por ejemplo, se aplicó esta transformación al superar el umbral de CV. 3. Evaluación de Estacionariedad con Dickey-Fuller. Para verificar la estabilidad estadística de la serie en el tiempo (es decir, su estacionariedad), se utilizó la prueba de Dickey-Fuller aumentada (ADF). Esta prueba contrasta la hipótesis nula de que la serie no es estacionaria. Criterio aplicado: Si el p-valor obtenido es menor a 0.05, se rechaza la hipótesis nula y se considera que la serie es estacionaria. Si el p-valor es mayor, se concluye que la serie no es estacionaria y se requiere una diferenciación. 4. Diferenciación: Cuando fue necesario, se aplicó la diferenciación de primer o segundo orden, utilizando la función ndiffs(), hasta lograr que la serie cumpla con el criterio de estacionariedad (p-valor &lt; 0.05 en la prueba ADF aplicada a la serie diferenciada). 4.1.2 Resumen del análisis de estacionariedad por índice bursátil SP500 Transformación logarítmica: Sí (CV = 0.225) p-valor Dickey-Fuller: 0.00848 ¿Diferenciación aplicada?: No. La serie ya es estacionaria. DowJones Transformación logarítmica: No (CV = 0.165) p-valor Dickey-Fuller: 0.00413 ¿Diferenciación aplicada?: No. La serie ya es estacionaria. Nasdaq Transformación logarítmica: Sí (CV = 0.263) p-valor Dickey-Fuller: 0.02449 ¿Diferenciación aplicada?: No. La serie ya es estacionaria. DAX Transformación logarítmica: No (CV = 0.185) p-valor Dickey-Fuller: 0.09312 (no estacionaria) Diferenciación aplicada: Sí, orden 1 p-valor tras diferenciación: 0.00000 Resultado final: La serie diferenciada es estacionaria. CAC40 Transformación logarítmica: No (CV = 0.156) p-valor Dickey-Fuller: 0.00247 ¿Diferenciación aplicada?: No. La serie ya es estacionaria. FTSE100 Transformación logarítmica: No (CV = 0.093) p-valor Dickey-Fuller: 0.00478 ¿Diferenciación aplicada?: No. La serie ya es estacionaria. Nikkei225 Transformación logarítmica: Sí (CV = 0.208) p-valor Dickey-Fuller: 0.00237 ¿Diferenciación aplicada?: No. La serie ya es estacionaria. HangSeng Transformación logarítmica: No (CV = 0.182) p-valor Dickey-Fuller: 0.01316 ¿Diferenciación aplicada?: No. La serie ya es estacionaria. ShanghaiComposite Transformación logarítmica: No (CV = 0.078) p-valor Dickey-Fuller: 0.00048 ¿Diferenciación aplicada?: No. La serie ya es estacionaria. 4.1.3 Creamos el objeto tabla del resumen final. Code # Crear tabla resumen para hallazgos resumen_estacionariedad &lt;- data.frame( Indice = character(), CV = numeric(), LogTransform = character(), DickeyFuller_pvalor = numeric(), Diferenciacion = character(), stringsAsFactors = FALSE ) 4.1.4 Implementación de procesos sobre los índices bursátile en tres etapas: limpieza, transformación (si aplica), y verificación de estacionariedad, con visualizaciones intermedias. Code # Lista para guardar las series procesadas series_preparadas &lt;- list() analizar_estacionariedad_transformacion &lt;- function(serie_zoo, nombre_indice) { cat(&quot;\\n\\n==================================================\\n&quot;) cat(&quot;ANÁLISIS DE:&quot;, nombre_indice, &quot;\\n&quot;) cat(&quot;==================================================\\n&quot;) # Limpieza de la serie serie &lt;- na.omit(serie_zoo) ts_serie &lt;- ts(as.numeric(serie), frequency = 252, start = c(2019, 1)) # Coeficiente de variación coef_var &lt;- sd(ts_serie) / mean(ts_serie) necesita_log &lt;- coef_var &gt; 0.2 if (necesita_log) { ts_trans &lt;- log(ts_serie) plot(ts_trans, main = paste(&quot;Serie Transformada (Log) -&quot;, nombre_indice), xlab = &quot;Tiempo&quot;, ylab = &quot;log(Precio)&quot;) cat(&quot;Transformación logarítmica aplicada (CV =&quot;, round(coef_var, 3), &quot;)\\n&quot;) } else { ts_trans &lt;- ts_serie plot(ts_trans, main = paste(&quot;Serie Original -&quot;, nombre_indice), xlab = &quot;Tiempo&quot;, ylab = &quot;Precio&quot;) cat(&quot;No se aplica transformación logarítmica (CV =&quot;, round(coef_var, 3), &quot;)\\n&quot;) } # Prueba Dickey-Fuller prueba_df &lt;- ur.df(ts_trans, type = &quot;trend&quot;, selectlags = &quot;AIC&quot;) pvalor_df &lt;- summary(prueba_df)@testreg$coefficients[2, 4] cat(&quot;p-valor Dickey-Fuller:&quot;, round(pvalor_df, 5), &quot;\\n&quot;) # Evaluar si se requiere diferenciación if (pvalor_df &lt; 0.05) { cat(&quot;La serie transformada es estacionaria. No se aplica diferenciación.\\n&quot;) serie_final &lt;- ts_trans diferenciacion_txt &lt;- &quot;No&quot; } else { d &lt;- ndiffs(ts_trans) ts_diff &lt;- diff(ts_trans, differences = d) plot(ts_diff, main = paste(&quot;Serie Diferenciada (d =&quot;, d, &quot;) -&quot;, nombre_indice), xlab = &quot;Tiempo&quot;, ylab = &quot;Diferencia&quot;) cat(&quot;Serie NO estacionaria. Se aplica diferenciación de orden:&quot;, d, &quot;\\n&quot;) prueba_df_diff &lt;- ur.df(ts_diff, type = &quot;drift&quot;, selectlags = &quot;AIC&quot;) pvalor_diff &lt;- summary(prueba_df_diff)@testreg$coefficients[2, 4] cat(&quot;p-valor Dickey-Fuller tras diferenciación:&quot;, round(pvalor_diff, 5), &quot;\\n&quot;) if (pvalor_diff &lt; 0.05) { cat(&quot;La serie diferenciada ahora es estacionaria.\\n&quot;) } else { cat(&quot;Incluso tras diferenciación, la serie NO es estacionaria.\\n&quot;) } serie_final &lt;- ts_diff diferenciacion_txt &lt;- paste(&quot;Sí, orden&quot;, d) } # Guardar la serie transformada series_preparadas[[nombre_indice]] &lt;&lt;- serie_final # Guardar en tabla resumen resumen_estacionariedad &lt;&lt;- rbind( resumen_estacionariedad, data.frame( Indice = nombre_indice, CV = round(coef_var, 3), LogTransform = ifelse(necesita_log, &quot;Sí&quot;, &quot;No&quot;), DickeyFuller_pvalor = round(pvalor_df, 5), Diferenciacion = diferenciacion_txt ) ) } 4.1.5 Iteramos los indices bursatiles sobre la función realizada. Code for (indice in nombres_indices) { analizar_estacionariedad_transformacion(cierres_zoo[[indice]], indice) } ## ## ## ================================================== ## ANÁLISIS DE: SP500 ## ================================================== ## Transformación logarítmica aplicada (CV = 0.228 ) ## p-valor Dickey-Fuller: 0.00777 ## La serie transformada es estacionaria. No se aplica diferenciación. ## ## ## ================================================== ## ANÁLISIS DE: DowJones ## ================================================== ## No se aplica transformación logarítmica (CV = 0.166 ) ## p-valor Dickey-Fuller: 0.00365 ## La serie transformada es estacionaria. No se aplica diferenciación. ## ## ## ================================================== ## ANÁLISIS DE: Nasdaq ## ================================================== ## Transformación logarítmica aplicada (CV = 0.266 ) ## p-valor Dickey-Fuller: 0.02269 ## La serie transformada es estacionaria. No se aplica diferenciación. ## ## ## ================================================== ## ANÁLISIS DE: DAX ## ================================================== ## No se aplica transformación logarítmica (CV = 0.198 ) ## p-valor Dickey-Fuller: 0.10877 ## Serie NO estacionaria. Se aplica diferenciación de orden: 1 ## p-valor Dickey-Fuller tras diferenciación: 0 ## La serie diferenciada ahora es estacionaria. ## ## ## ================================================== ## ANÁLISIS DE: CAC40 ## ================================================== ## No se aplica transformación logarítmica (CV = 0.156 ) ## p-valor Dickey-Fuller: 0.00238 ## La serie transformada es estacionaria. No se aplica diferenciación. ## ## ## ================================================== ## ANÁLISIS DE: FTSE100 ## ================================================== ## No se aplica transformación logarítmica (CV = 0.095 ) ## p-valor Dickey-Fuller: 0.0059 ## La serie transformada es estacionaria. No se aplica diferenciación. ## ## ## ================================================== ## ANÁLISIS DE: Nikkei225 ## ================================================== ## Transformación logarítmica aplicada (CV = 0.209 ) ## p-valor Dickey-Fuller: 0.00195 ## La serie transformada es estacionaria. No se aplica diferenciación. ## ## ## ================================================== ## ANÁLISIS DE: HangSeng ## ================================================== ## No se aplica transformación logarítmica (CV = 0.181 ) ## p-valor Dickey-Fuller: 0.03218 ## La serie transformada es estacionaria. No se aplica diferenciación. ## ## ## ================================================== ## ANÁLISIS DE: ShanghaiComposite ## ================================================== ## No se aplica transformación logarítmica (CV = 0.077 ) ## p-valor Dickey-Fuller: 0.00048 ## La serie transformada es estacionaria. No se aplica diferenciación. 4.2 Tabla de resumen. Code knitr::kable( resumen_estacionariedad, caption = &quot;Resumen del análisis de estacionariedad y transformaciones aplicadas por índice bursátil&quot; ) Table 4.1: Resumen del análisis de estacionariedad y transformaciones aplicadas por índice bursátil Indice CV LogTransform DickeyFuller_pvalor Diferenciacion SP500 0.228 Sí 0.00777 No DowJones 0.166 No 0.00365 No Nasdaq 0.266 Sí 0.02269 No DAX 0.198 No 0.10877 Sí, orden 1 CAC40 0.156 No 0.00238 No FTSE100 0.095 No 0.00590 No Nikkei225 0.209 Sí 0.00195 No HangSeng 0.181 No 0.03218 No ShanghaiComposite 0.077 No 0.00048 No "],["desarrollo-actividad-4-implementación-holt---winter.html", "Chapter 5 Desarrollo actividad 4 Implementación Holt - Winter 5.1 Funciones y lógicas implementadas 5.2 Implementar modelo en todas las series de tiempo 5.3 Resultados predicción 5.4 Tabla de resumen", " Chapter 5 Desarrollo actividad 4 Implementación Holt - Winter Teniendo en cuenta el análisis exhaustivo realizado por el grupo pudimos identificar que el método Holt - Winter del paquete Forecast está mas actualizado que en la librería TSA. Por otra parte, permite generar pronósticos y métricas de evaluación directamente con objetos tipo forecast y es el estándar moderno en modelado predictivo de series temporales en R. Por consiguiente, desarrollamos la actividad con el paquete Forecast y no con la libreria TSA. Las predicciones y mediciones de MAE, RMSE, MAPE; se encuentran por debajo de los gráficos. 5.1 Funciones y lógicas implementadas Code # Lista para guardar resultados resultados_hw &lt;- list() metricas_hw &lt;- data.frame( Indice = character(), MAE = numeric(), RMSE = numeric(), MAPE = numeric(), stringsAsFactors = FALSE ) # Función para ajustar modelo Holt-Winters, graficar y guardar métricas ajustar_holt_winters &lt;- function(serie_ts, nombre_indice) { if (length(serie_ts) &lt; 30) { cat(&quot;Serie demasiado corta para aplicar Holt-Winters:&quot;, nombre_indice, &quot;\\n&quot;) return(NULL) } modelo_hw &lt;- tryCatch({ HoltWinters(serie_ts) }, error = function(e) { cat(&quot;Error en Holt-Winters para&quot;, nombre_indice, &quot;:&quot;, e$message, &quot;\\n&quot;) return(NULL) }) if (!is.null(modelo_hw)) { # Gráfico del modelo ajustado plot(modelo_hw, main = paste(&quot;Modelo Holt-Winters -&quot;, nombre_indice)) # Pronóstico a 30 días pred_hw &lt;- forecast(modelo_hw, h = 30) plot(pred_hw, main = paste(&quot;Pronóstico Holt-Winters (30 días) -&quot;, nombre_indice)) # Guardar resultados resultados_hw[[nombre_indice]] &lt;&lt;- list(modelo = modelo_hw, pronostico = pred_hw) # Evaluación en el ajuste (no en el forecast) obs &lt;- as.numeric(serie_ts) pred &lt;- as.numeric(modelo_hw$fitted[,1]) # fitted values # Calcular métricas mae &lt;- mae(obs, pred) rmse_val &lt;- rmse(obs, pred) mape_val &lt;- mape(obs, pred) * 100 # porcentaje metricas_hw &lt;&lt;- rbind(metricas_hw, data.frame( Indice = nombre_indice, MAE = round(mae, 2), RMSE = round(rmse_val, 2), MAPE = round(mape_val, 2) )) } } 5.2 Implementar modelo en todas las series de tiempo Code # Aplicamos Holt-Winters a cada serie de tiempo procesada for (indice in names(series_preparadas)) { ajustar_holt_winters(series_preparadas[[indice]], indice) } 5.3 Resultados predicción El modelo Holt-Winters permitió generar predicciones a corto plazo razonablemente precisas para la mayoría de los índices, los mejores desempeños se observaron en los mercados de EE.UU. y Japón, mientras que los índices europeos y asiáticos mostraron mayor incertidumbre.La tabla presentada muestra el pronóstico diario para los próximos 30 días de cada uno de los índices bursátiles, basado en el modelo Holt-Winters ajustado previamente. A continuación, se destacan los principales hallazgos: 1. SP500, Nasdaq y Nikkei225 Las predicciones muestran una evolución estable y creciente, en línea con la tendencia positiva observada en el ajuste histórico.Dado que estos índices fueron transformados logarítmicamente, los valores están en escala log (por ejemplo, 8.7 en SP500 ≈ exp(8.7) ≈ 6,000 puntos).La suavidad de las predicciones refleja alta confianza del modelo, coherente con su bajo error (MAPE &lt; 3%). 2. DowJones Presenta un comportamiento consistentemente ascendente, alcanzando valores proyectados por encima de 44,000 puntos,este patrón respalda la tendencia alcista de largo plazo observada en el análisis exploratorio;sin embargo, su MAPE fue de 16.9%, lo que sugiere que las predicciones deben interpretarse con precaución moderada. 3. CAC40 y FTSE100 Exhiben una trayectoria positiva con leves oscilaciones, lo cual refleja cierta estacionalidad capturada por el modelo, las predicciones se mantienen dentro de un rango realista, entre 7,700 y 9,100 puntos.Muestra un balance entre crecimiento y estabilización tras periodos volátiles. 4. DAX A diferencia de otros índices, muestra una gran variabilidad y valores negativos ocasionales en la proyección.Esto indica que el modelo Holt-Winters no logró capturar adecuadamente la dinámica del índice alemán, posiblemente por la forma en que se transformó y/o diferenció la serie. 5. HangSeng y Shanghai Composite Ambos índices presentan predicciones ligeramente crecientes, lo que sugiere un posible cambio de dirección frente a la caída previa; sin embargo, las fluctuaciones son más intensas (especialmente en HangSeng), reflejando su naturaleza volátil.La precisión de estos modelos fue moderada (MAPE entre 8% y 16%). Code # Crear tabla con pronóstico de los próximos 30 días para cada índice # Inicializamos la tabla vacía tabla_forecast_30 &lt;- data.frame(Dia = 1:30) # Agregamos cada columna de pronóstico for (indice in names(resultados_hw)) { pred &lt;- resultados_hw[[indice]]$pronostico tabla_forecast_30[[indice]] &lt;- round(as.numeric(pred$mean), 2) } # Mostrar tabla en formato limpio knitr::kable( tabla_forecast_30, caption = &quot;Predicción de los próximos 30 días por índice bursátil usando modelo Holt-Winters&quot; ) Table 5.1: Predicción de los próximos 30 días por índice bursátil usando modelo Holt-Winters Dia SP500 DowJones Nasdaq DAX CAC40 FTSE100 Nikkei225 HangSeng ShanghaiComposite 1 8.70 42327.98 9.89 8.67 7673.45 8846.17 10.55 24258.83 3368.86 2 8.68 41500.03 9.87 -21.25 7730.42 8910.50 10.55 24361.32 3388.29 3 8.66 40891.42 9.85 -96.12 7726.05 8942.07 10.55 23852.96 3386.94 4 8.66 40940.25 9.85 76.99 7715.59 8993.09 10.54 23719.54 3415.32 5 8.66 41122.26 9.86 -28.32 7701.68 8979.05 10.53 23741.46 3429.67 6 8.66 41142.41 9.86 62.06 7708.85 9017.90 10.53 23679.40 3432.31 7 8.66 41108.35 9.87 -49.61 7628.39 8997.68 10.54 24035.09 3421.24 8 8.67 41303.89 9.88 63.77 7598.10 8971.75 10.55 24225.59 3406.26 9 8.67 41155.30 9.89 17.46 7635.31 8936.24 10.57 24268.08 3426.75 10 8.67 41263.36 9.89 -29.11 7514.25 8966.65 10.56 24164.06 3431.77 11 8.68 41237.63 9.90 -12.25 7430.12 8943.06 10.56 23985.04 3435.64 12 8.67 41053.11 9.89 -186.30 7370.63 9066.60 10.57 23692.67 3438.42 13 8.66 40684.65 9.87 111.26 7345.26 9230.95 10.58 23652.22 3462.54 14 8.65 40697.04 9.87 92.42 7405.32 9264.46 10.59 24031.44 3452.02 15 8.66 40744.08 9.88 53.83 7387.25 9303.99 10.59 24100.68 3444.42 16 8.66 40866.80 9.89 92.52 7381.61 9337.80 10.58 24185.05 3449.15 17 8.68 41289.69 9.90 -106.04 7381.33 9307.30 10.57 23361.92 3435.81 18 8.70 41825.14 9.91 53.31 7366.02 9336.91 10.57 22934.13 3430.03 19 8.71 42333.70 9.92 56.09 7298.14 9323.11 10.58 22840.22 3438.97 20 8.72 42388.92 9.91 119.94 7313.50 9313.81 10.58 22886.66 3437.37 21 8.72 42433.33 9.92 -113.56 7357.90 9283.98 10.59 22848.74 3460.69 22 8.72 42511.56 9.92 -14.76 7363.01 9328.11 10.59 22632.03 3479.47 23 8.72 42750.08 9.92 -35.22 7375.26 9351.22 10.59 23045.83 3488.37 24 8.72 42819.22 9.92 -11.52 7384.24 9323.67 10.61 23418.13 3495.07 25 8.73 42868.46 9.92 -87.52 7380.61 9284.42 10.62 23740.01 3497.53 26 8.72 42718.13 9.92 95.07 7337.53 9321.39 10.64 23920.47 3502.51 27 8.72 42764.74 9.92 162.52 7322.10 9296.48 10.65 24297.20 3502.12 28 8.72 42693.44 9.92 -63.98 7350.04 9284.98 10.66 24343.56 3489.41 29 8.72 42612.99 9.92 -69.82 7342.91 9293.68 10.66 24501.22 3484.23 30 8.72 42689.79 9.92 19.49 7387.79 9356.87 10.68 24584.51 3489.30 5.4 Tabla de resumen Se calcula el error absoluto medio(MAE), la raiz del error cuadratico medio(RMSE) y el error porcentual medio absoluto(MAPE). 1. Modelos con excelente ajuste: *SP500, Nasdaq y Nikkei225 tienen errores muy bajos: *MAE y RMSE &lt; 1 *MAPE menor a 3% Esto indica que el modelo Holt-Winters representa muy bien la estructura interna de estas series. 2. Modelos aceptables pero con errores moderados: *ShanghaiComposite: MAPE de 8.68% → aceptable *FTSE100 y CAC40: alrededor del 12-16% 3. Modelos con alto error: *DowJones y HangSeng tienen MAPE de 16.9% → error alto *DAX tiene MAPE de 392% → esto es un claro problema. Code # Mostrar métricas como tabla knitr::kable( metricas_hw, caption = &quot;Evaluación del modelo Holt-Winters por índice bursátil (basado en el ajuste histórico)&quot; ) Table 5.2: Evaluación del modelo Holt-Winters por índice bursátil (basado en el ajuste histórico) Indice MAE RMSE MAPE SP500 0.24 0.29 2.81 DowJones 5740.68 7553.54 16.85 Nasdaq 0.30 0.35 3.15 DAX 101.45 172.70 372.57 CAC40 1032.53 1328.94 16.50 FTSE100 899.10 1148.22 12.11 Nikkei225 0.21 0.27 1.99 HangSeng 3688.42 4480.24 16.65 ShanghaiComposite 272.03 324.98 8.70 "],["desarrollo-actividad-5.-implementación-de-la-metodología-box-jenkins-modelo-arima.html", "Chapter 6 Desarrollo Actividad 5. Implementación de la Metodología Box-Jenkins (Modelo ARIMA) 6.1 Fundamentos teóricos del modelo ARIMA y Box-Jenkins 6.2 Implementación de las lógicas y modelos. 6.3 Resumen e interpretación de las gráficas y resultados de las funciones. 6.4 Tabla con predicciones de 30 días. 6.5 Tabla con evaluación de modelo Arima(MAE,RMSE,MAPE)", " Chapter 6 Desarrollo Actividad 5. Implementación de la Metodología Box-Jenkins (Modelo ARIMA) 6.1 Fundamentos teóricos del modelo ARIMA y Box-Jenkins La metodología Box-Jenkins, base del modelo ARIMA (Autoregressive Integrated Moving Average), es uno de los enfoques más robustos y utilizados en el análisis de series de tiempo. Se centra en modelar la dependencia temporal de los datos y consta de tres componentes: AR (autoregresivo): Utiliza valores pasados de la serie para predecir el valor actual. I (integrado): Representa la diferenciación necesaria para hacer la serie estacionaria. MA (media móvil): Usa los residuos (errores pasados) para mejorar la predicción. 6.1.1 Etapas de la metodología Box-Jenkins: Identificación: Determinar si la serie necesita diferenciación y establecer los valores iniciales de p, d, q. Estimación: Ajustar los parámetros del modelo y validar su significancia. Diagnóstico: Verificar si los residuos se comportan como ruido blanco. Pronóstico: Usar el modelo ajustado para proyectar valores futuros. El paquete forecast en R proporciona la función auto.arima() que automatiza este proceso, seleccionando el mejor modelo según el criterio AICc (Akaike Information Criterion corregido). 6.2 Implementación de las lógicas y modelos. Es importante resaltar que como se tienen múltiples series de tiempo, es necesario implementar ciclos que iteren sobres las funciones para poder trabajaro con todos los indices bursatiles, las fases del presente punto son las siguientes: 1. Inicializamos las estructuras de almacenamiento donde se guardarán los pronosticos individuales y las métricas. 2. Definimos la función que se aplicará donde se realiza la estimación automática del modelo y los diagnosticos de residuos. 3. Realizamos los pronosticos y visualizaciones. 4. Almacenamos las predicciones y evaluamos las métricas de error. 5. Aplicamos la función a todos los indices mediante ciclos itarativos, en este caso el ciclo for. 6.3 Resumen e interpretación de las gráficas y resultados de las funciones. 1. SP500 – ARIMA(2,1,2) con drift Modelo: El modelo ARIMA(2,1,2) con drift muestra significancia en todos los coeficientes, lo cual sugiere una estructura bien ajustada a los datos. Bondad de ajuste: Métricas muy bajas (MAE = 0.0084, RMSE = 0.0124) y un MAPE de 0.10 indican una excelente capacidad predictiva. Residuos: Son estacionarios y centrados en cero. El gráfico ACF de residuos muestra autocorrelaciones insignificantes, reforzado por la prueba Ljung-Box (p = 0.9982), lo que indica que el modelo ha capturado correctamente la estructura temporal. Distribución: Los residuos siguen aproximadamente una distribución normal. Pronóstico: La proyección para 30 días mantiene la tendencia alcista histórica con bandas de confianza estrechas, lo cual indica alta precisión en la predicción. 2. Dow Jones – ARIMA(5,1,3) con drift Modelo: Se utiliza un modelo de orden relativamente alto, lo cual puede reflejar una dinámica compleja en esta serie. Bondad de ajuste: Aunque el MAE (245.21) y el RMSE (355.49) son elevados debido a la escala del índice, el MAPE de 0.77 confirma un buen desempeño porcentual. Residuos: No se observan patrones significativos ni autocorrelación, confirmado por la prueba de Ljung-Box (p = 1). La distribución de los residuos es simétrica y normal. Pronóstico: Se observa una continuación de la tendencia creciente reciente, con un intervalo de confianza relativamente estrecho para un índice con tanta variabilidad histórica. 3. Nasdaq – ARIMA(4,1,3) con drift Modelo: Buena capacidad explicativa con parámetros significativos. Incluye una combinación de términos AR y MA que captura la dinámica del Nasdaq. Bondad de ajuste: Muy buen ajuste (MAE = 0.0108, RMSE = 0.0152, MAPE = 0.12). Residuos: Los residuos son ruido blanco y normalmente distribuidos. Ljung-Box (p = 0.992) indica independencia serial. Pronóstico: Predice estabilidad y una continuación de la tendencia alcista. Las bandas de confianza ajustadas indican una buena capacidad de generalización. 4. DAX – ARIMA(4,0,3) con media distinta de cero Modelo: Se aplicó sin diferenciación (d = 0), lo cual puede deberse a estacionariedad tras transformaciones previas. Incluye una media distinta de cero. Bondad de ajuste: MAE (121.65) y RMSE (174.54) elevados en términos absolutos, pero el MAPE de 150.74% es una señal de sobreajuste o mal ajuste. Residuos: Aunque visualmente parecen normales, el alto MAPE y la varianza sugieren que el modelo no captura adecuadamente la variabilidad relativa del índice. Pronóstico: El comportamiento futuro proyectado presenta alta incertidumbre, reflejada en las amplias bandas. Precaución al interpretar. 5. CAC 40 – ARIMA(0,1,0) Modelo: Es un modelo puramente aleatorio con diferenciación (una caminata aleatoria). No incluye ningún componente AR o MA. Bondad de ajuste: Pese a su simpleza, el modelo muestra métricas aceptables (MAE = 51.4, RMSE = 72.68, MAPE = 0.83). Residuos: El comportamiento de los residuos es ruido blanco, confirmado por Ljung-Box (p = 0.056). La distribución es aproximadamente normal. Pronóstico: Debido a la naturaleza del modelo, el pronóstico proyecta una continuidad de la tendencia reciente sin componente estructural. Las bandas son más amplias que en modelos complejos. 6. FTSE 100 – ARIMA(0,1,0) Modelo: Mismo planteamiento que el CAC 40, es decir, una caminata aleatoria sin términos AR o MA. Bondad de ajuste: MAE = 48.43, RMSE = 70.81, y MAPE = 0.69, lo cual representa un rendimiento moderado aceptable. Residuos: No hay autocorrelación significativa (Ljung-Box p = 0.1141), y la distribución es normal. Pronóstico: Proyección continua de la tendencia, con incertidumbre moderada. Adecuado para horizontes de corto plazo dada su simplicidad. 7. Nikkei 225 – ARIMA(1,1,2) Modelo: Estructura razonable para datos financieros, permite capturar choques y componentes transitorios. Bondad de ajuste: Muy buenos indicadores de ajuste (MAE = 0.0093, RMSE = 0.0138, MAPE = 0.09). Residuos: Distribución normal, sin autocorrelación significativa (p = 0.8749). El modelo cumple con los supuestos de ruido blanco. Pronóstico: Muestra un comportamiento alcista y confiable, con estrechas bandas de predicción que reflejan confianza del modelo. 8. Hang Seng – ARIMA(0,1,0) Modelo: Igual que CAC 40 y FTSE 100, una caminata aleatoria sin componente estructural. Bondad de ajuste: MAE elevado (244.97) y MAPE de 1.10, lo cual refleja dificultades para predecir movimientos relativos del índice. Residuos: Aunque la distribución es normal y el p-valor de Ljung-Box (0.9091) es alto, la magnitud del error indica que el modelo es poco explicativo en términos relativos. Pronóstico: Pese a la estructura simple, el comportamiento errático reciente del índice hace que las predicciones deban tomarse con cautela. 9. Shanghai Composite – ARIMA(0,1,0) Modelo: Nuevamente una caminata aleatoria, posiblemente porque los datos no muestran patrones fuertes tras diferenciación. Bondad de ajuste: Métricas aceptables (MAE = 23.92, RMSE = 34.58, MAPE = 0.75). Residuos: Están bien comportados; Ljung-Box p = 0.6892 indica que no hay autocorrelación residual. Pronóstico: Se proyecta una continuación de la tendencia moderada con baja varianza, aunque limitada capacidad explicativa del modelo. Code # Inicializar estructuras para almacenar resultados resultados_arima &lt;- list() metricas_arima &lt;- data.frame( Indice = character(), MAE = numeric(), RMSE = numeric(), MAPE = numeric(), stringsAsFactors = FALSE ) # Función para ajustar ARIMA, graficar y evaluar ajustar_modelo_arima &lt;- function(serie_ts, nombre_indice) { cat(&quot;\\n\\n==============================\\n&quot;) cat(&quot;Modelo ARIMA -&quot;, nombre_indice, &quot;\\n&quot;) cat(&quot;==============================\\n&quot;) modelo &lt;- auto.arima(serie_ts, seasonal = FALSE) print(summary(modelo)) # Diagnóstico de residuos checkresiduals(modelo) # Pronóstico a 30 días forecast_arima &lt;- forecast(modelo, h = 30) plot(forecast_arima, main = paste(&quot;Pronóstico ARIMA (30 días) -&quot;, nombre_indice)) # Guardar resultados resultados_arima[[nombre_indice]] &lt;&lt;- list(modelo = modelo, pronostico = forecast_arima) # Métricas de ajuste obs &lt;- as.numeric(serie_ts) pred &lt;- as.numeric(fitted(modelo)) mae_val &lt;- mae(obs, pred) rmse_val &lt;- rmse(obs, pred) mape_val &lt;- mape(obs, pred) * 100 metricas_arima &lt;&lt;- rbind(metricas_arima, data.frame( Indice = nombre_indice, MAE = round(mae_val, 2), RMSE = round(rmse_val, 2), MAPE = round(mape_val, 2) )) } # Aplicar modelo a cada índice preparado for (indice in names(series_preparadas)) { ajustar_modelo_arima(series_preparadas[[indice]], indice) } ## ## ## ============================== ## Modelo ARIMA - SP500 ## ============================== ## Series: serie_ts ## ARIMA(2,1,2) with drift ## ## Coefficients: ## ar1 ar2 ma1 ma2 drift ## -1.7347 -0.8778 1.6110 0.7360 5e-04 ## s.e. 0.0276 0.0266 0.0387 0.0369 3e-04 ## ## sigma^2 = 0.0001549: log likelihood = 4812.81 ## AIC=-9613.62 AICc=-9613.56 BIC=-9581.27 ## ## Training set error measures: ## ME RMSE MAE MPE MAPE ## Training set -6.821801e-07 0.01242211 0.008409967 -9.055436e-05 0.101758 ## MASE ACF1 ## Training set 0.04908003 0.0168745 ## ## Ljung-Box test ## ## data: Residuals from ARIMA(2,1,2) with drift ## Q* = 246.25, df = 320, p-value = 0.9992 ## ## Model df: 4. Total lags used: 324 ## ## ## ============================== ## Modelo ARIMA - DowJones ## ============================== ## Series: serie_ts ## ARIMA(5,1,3) with drift ## ## Coefficients: ## ar1 ar2 ar3 ar4 ar5 ma1 ma2 ma3 drift ## -0.6572 0.8702 0.7710 -0.0778 -0.011 0.6007 -0.8350 -0.7046 11.3388 ## s.e. 0.0993 0.0486 0.1006 0.0321 0.037 0.0959 0.0395 0.0785 5.2315 ## ## sigma^2 = 127214: log likelihood = -11822.06 ## AIC=23664.13 AICc=23664.26 BIC=23718.04 ## ## Training set error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 0.5655935 355.5691 244.9101 -0.007971009 0.7706186 0.06076178 ## ACF1 ## Training set 0.0004500097 ## ## Ljung-Box test ## ## data: Residuals from ARIMA(5,1,3) with drift ## Q* = 216.85, df = 316, p-value = 1 ## ## Model df: 8. Total lags used: 324 ## ## ## ============================== ## Modelo ARIMA - Nasdaq ## ============================== ## Series: serie_ts ## ARIMA(4,1,3) with drift ## ## Coefficients: ## ar1 ar2 ar3 ar4 ma1 ma2 ma3 drift ## -1.2112 0.0031 0.4041 -0.0275 1.1070 -0.0759 -0.3841 7e-04 ## s.e. 0.4456 0.7735 0.3949 0.0310 0.4454 0.7269 0.3423 3e-04 ## ## sigma^2 = 0.0002319: log likelihood = 4487.09 ## AIC=-8956.18 AICc=-8956.07 BIC=-8907.66 ## ## Training set error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set -1.720076e-07 0.01518684 0.01080185 -6.758288e-05 0.1148814 0.0445298 ## ACF1 ## Training set -0.0005196274 ## ## Ljung-Box test ## ## data: Residuals from ARIMA(4,1,3) with drift ## Q* = 256.89, df = 317, p-value = 0.9943 ## ## Model df: 7. Total lags used: 324 ## ## ## ============================== ## Modelo ARIMA - DAX ## ============================== ## Series: serie_ts ## ARIMA(4,0,3) with non-zero mean ## ## Coefficients: ## ar1 ar2 ar3 ar4 ma1 ma2 ma3 mean ## -0.6198 0.7680 0.7944 -0.0686 0.6139 -0.7171 -0.7932 7.5458 ## s.e. 0.0641 0.0613 0.0588 0.0269 0.0605 0.0616 0.0579 3.5619 ## ## sigma^2 = 30655: log likelihood = -10787.59 ## AIC=21593.18 AICc=21593.29 BIC=21641.8 ## ## Training set error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set 0.366812 174.6578 122.058 95.65569 140.1899 0.6801567 0.00237603 ## ## Ljung-Box test ## ## data: Residuals from ARIMA(4,0,3) with non-zero mean ## Q* = 301.24, df = 321, p-value = 0.7794 ## ## Model df: 7. Total lags used: 328 ## ## ## ============================== ## Modelo ARIMA - CAC40 ## ============================== ## Series: serie_ts ## ARIMA(0,1,0) ## ## sigma^2 = 5250: log likelihood = -9413.82 ## AIC=18829.64 AICc=18829.64 BIC=18835.05 ## ## Training set error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 1.815968 72.43207 51.19603 0.02236678 0.8229913 0.06673023 ## ACF1 ## Training set -0.01233301 ## ## Ljung-Box test ## ## data: Residuals from ARIMA(0,1,0) ## Q* = 371.98, df = 330, p-value = 0.05532 ## ## Model df: 0. Total lags used: 330 ## ## ## ============================== ## Modelo ARIMA - FTSE100 ## ============================== ## Series: serie_ts ## ARIMA(0,1,0) ## ## sigma^2 = 4972: log likelihood = -9227.07 ## AIC=18456.14 AICc=18456.14 BIC=18461.53 ## ## Training set error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 1.304938 70.48934 48.17525 0.01136564 0.6807597 0.07119222 ## ACF1 ## Training set 0.001819773 ## ## Ljung-Box test ## ## data: Residuals from ARIMA(0,1,0) ## Q* = 357.27, df = 325, p-value = 0.1053 ## ## Model df: 0. Total lags used: 325 ## ## ## ============================== ## Modelo ARIMA - Nikkei225 ## ============================== ## Series: serie_ts ## ARIMA(1,1,2) ## ## Coefficients: ## ar1 ma1 ma2 ## -0.6127 0.5761 0.0578 ## s.e. 0.1356 0.1363 0.0288 ## ## sigma^2 = 0.000178: log likelihood = 4551.55 ## AIC=-9095.1 AICc=-9095.07 BIC=-9073.66 ## ## Training set error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 0.0004203256 0.01332431 0.009274524 0.004036315 0.09055867 0.06286404 ## ACF1 ## Training set -0.0008281176 ## ## Ljung-Box test ## ## data: Residuals from ARIMA(1,1,2) ## Q* = 287.69, df = 311, p-value = 0.8244 ## ## Model df: 3. Total lags used: 314 ## ## ## ============================== ## Modelo ARIMA - HangSeng ## ============================== ## Series: serie_ts ## ARIMA(0,1,0) ## ## sigma^2 = 113565: log likelihood = -11466.58 ## AIC=22935.16 AICc=22935.16 BIC=22940.52 ## ## Training set error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set -0.7650844 336.8874 244.4488 -0.01495239 1.10044 0.07103812 ## ACF1 ## Training set -0.0003821324 ## ## Ljung-Box test ## ## data: Residuals from ARIMA(0,1,0) ## Q* = 288.66, df = 317, p-value = 0.8717 ## ## Model df: 0. Total lags used: 317 ## ## ## ============================== ## Modelo ARIMA - ShanghaiComposite ## ============================== ## Series: serie_ts ## ARIMA(0,1,0) ## ## sigma^2 = 1185: log likelihood = -7728.86 ## AIC=15459.72 AICc=15459.72 BIC=15465.07 ## ## Training set error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 0.5860066 34.40895 23.76682 0.01426858 0.7504581 0.07896708 ## ACF1 ## Training set 0.02829431 ## ## Ljung-Box test ## ## data: Residuals from ARIMA(0,1,0) ## Q* = 304.04, df = 312, p-value = 0.6158 ## ## Model df: 0. Total lags used: 312 Code # Tabla de pronóstico a 30 días tabla_forecast_arima &lt;- data.frame(Dia = 1:30) for (indice in names(resultados_arima)) { pred &lt;- resultados_arima[[indice]]$pronostico tabla_forecast_arima[[indice]] &lt;- round(as.numeric(pred$mean), 2) } 6.4 Tabla con predicciones de 30 días. 1. S&amp;P 500 Valores estimados: Estables entre 8.69 y 8.71 (escala logarítmica). Interpretación: El modelo proyecta un crecimiento moderado y sostenido. Al tratarse de valores log-transformados, este pequeño incremento diario implica un crecimiento exponencial lento pero constante en el índice real. Observación relevante: Alta estabilidad en la predicción sugiere que el ARIMA(2,1,2) capta muy bien la dinámica interna del índice, sin anticipar cambios abruptos. 2. Dow Jones Rango proyectado: De 42,687 a 43,058 puntos. Tendencia: Claramente creciente, con una pendiente constante de entre 50 y 100 puntos por día. Observación relevante: Aunque el modelo ARIMA(5,1,3) muestra una buena trayectoria, la dispersión en la tabla (por ejemplo, ligera caída en el día 2) indica cierta inestabilidad en los coeficientes de corto plazo. No obstante, la evolución general es positiva. 3. Nasdaq Valores estimados: Totalmente estables entre 9.86 y 9.88 (escala logarítmica). Comentario: La predicción proyecta un comportamiento plano. Esto puede interpretarse como una pausa en el crecimiento explosivo observado históricamente, o una sobrecorrección del modelo tras las diferenciaciones. Observación relevante:: Interpretar la predicción con precaución, ya que los cambios mínimos en la escala log pueden ocultar variabilidad significativa en precios reales. 4. DAX Predicciones: Muy irregulares (desde -5.32 hasta 31.45). Diagnóstico: Esta inestabilidad sugiere problemas con el ajuste del modelo ARIMA(4,0,3), que no logra capturar adecuadamente la serie. La aparición de valores negativos (día 2 y 5) es un indicador crítico de mal ajuste o necesidad de transformación logarítmica. Observación relevante: El modelo no es fiable en este caso y debe ser revisado o sustituido por alternativas como SARIMA o modelos con intervención. 5. CAC 40 Valor constante: 7,886.69 durante los 30 días. Implicación técnica: El modelo ARIMA(0,1,0) predice una caminata aleatoria sin tendencia, y la salida es un valor plano. Observación relevante: Aunque estadísticamente válido, no proporciona información predictiva útil; simplemente extiende el último valor conocido. 6. FTSE 100 Valor constante: 8,684.60. Observación relevante: La falta de componentes AR o MA hace que el modelo no proyecte cambios y se limite a replicar el último valor. Esto es inútil para decisiones estratégicas. 7. Nikkei 225 Valor proyectado: 10.54 (escala logarítmica). Análisis: Predicción totalmente constante, lo que puede deberse a un modelo con alto ajuste histórico pero sin capacidad de capturar variaciones futuras. Observación relevante: A pesar de un buen ajuste, el modelo subestima la variabilidad esperada del mercado japonés. 8. Hang Seng Valor proyectado: 23,345.05 (constante). Comentario: El modelo ARIMA(0,1,0) asigna una caminata aleatoria sin dirección, pero aquí incluso elimina la variabilidad. Puede haber una sobreajuste plano, indicando que el modelo no está aprendiendo nada nuevo del patrón. Observación relevante: Pobre capacidad predictiva en este caso. 9. Shanghai Composite Valor proyectado: 3,367.46 (constante). Observación relevante: Sin cambios proyectados, el modelo se limita a la prolongación inercial del valor actual. Code knitr::kable( tabla_forecast_arima, caption = &quot;Predicción de los próximos 30 días por índice bursátil usando modelo ARIMA&quot; ) Table 6.1: Predicción de los próximos 30 días por índice bursátil usando modelo ARIMA Dia SP500 DowJones Nasdaq DAX CAC40 FTSE100 Nikkei225 HangSeng ShanghaiComposite 1 8.70 42250.46 9.87 -14.01 7684.68 8850.6 10.54 23892.56 3377 2 8.70 42210.61 9.88 -2.72 7684.68 8850.6 10.54 23892.56 3377 3 8.70 42223.89 9.88 15.93 7684.68 8850.6 10.54 23892.56 3377 4 8.70 42281.05 9.88 -4.64 7684.68 8850.6 10.54 23892.56 3377 5 8.70 42229.88 9.88 14.86 7684.68 8850.6 10.54 23892.56 3377 6 8.70 42327.20 9.88 1.02 7684.68 8850.6 10.54 23892.56 3377 7 8.70 42263.38 9.88 6.95 7684.68 8850.6 10.54 23892.56 3377 8 8.70 42347.15 9.88 9.55 7684.68 8850.6 10.54 23892.56 3377 9 8.70 42316.13 9.88 0.16 7684.68 8850.6 10.54 23892.56 3377 10 8.70 42354.40 9.88 13.64 7684.68 8850.6 10.54 23892.56 3377 11 8.70 42371.92 9.88 -0.26 7684.68 8850.6 10.54 23892.56 3377 12 8.70 42365.16 9.88 11.06 7684.68 8850.6 10.54 23892.56 3377 13 8.70 42417.03 9.88 4.71 7684.68 8850.6 10.54 23892.56 3377 14 8.70 42389.12 9.88 5.38 7684.68 8850.6 10.54 23892.56 3377 15 8.71 42446.80 9.88 10.04 7684.68 8850.6 10.54 23892.56 3377 16 8.70 42426.12 9.88 1.84 7684.68 8850.6 10.54 23892.56 3377 17 8.71 42465.61 9.89 11.47 7684.68 8850.6 10.54 23892.56 3377 18 8.71 42468.92 9.89 2.86 7684.68 8850.6 10.54 23892.56 3377 19 8.71 42482.17 9.89 8.76 7684.68 8850.6 10.54 23892.56 3377 20 8.71 42508.95 9.89 6.71 7684.68 8850.6 10.54 23892.56 3377 21 8.71 42503.78 9.89 5.01 7684.68 8850.6 10.54 23892.56 3377 22 8.71 42541.20 9.89 9.76 7684.68 8850.6 10.54 23892.56 3377 23 8.71 42532.88 9.89 3.48 7684.68 8850.6 10.54 23892.56 3377 24 8.71 42565.88 9.89 9.81 7684.68 8850.6 10.54 23892.56 3377 25 8.71 42567.09 9.89 4.95 7684.68 8850.6 10.54 23892.56 3377 26 8.71 42586.93 9.89 7.51 7684.68 8850.6 10.54 23892.56 3377 27 8.71 42601.82 9.89 7.65 7684.68 8850.6 10.54 23892.56 3377 28 8.71 42608.95 9.89 5.24 7684.68 8850.6 10.54 23892.56 3377 29 8.71 42633.24 9.89 9.21 7684.68 8850.6 10.54 23892.56 3377 30 8.71 42634.59 9.89 4.83 7684.68 8850.6 10.54 23892.56 3377 6.5 Tabla con evaluación de modelo Arima(MAE,RMSE,MAPE) La siguiente tablarecoge los principales indicadores de error para cada uno de los modelos ARIMA ajustados a los distintos índices bursátiles. Se analizaron tres métricas clave para evaluar el rendimiento del ajuste histórico: MAE (Mean Absolute Error): Promedio del valor absoluto de los errores. RMSE (Root Mean Squared Error): Raíz cuadrada del error cuadrático medio. MAPE (Mean Absolute Percentage Error): Error porcentual medio absoluto. Estas métricas permiten evaluar tanto la precisión absoluta (MAE, RMSE) como la proporcionalidad del error en relación con los niveles reales de los índices (MAPE). Code # Tabla de evaluación del modelo ARIMA knitr::kable( metricas_arima, caption = &quot;Evaluación del modelo ARIMA por índice bursátil (basado en el ajuste histórico)&quot; ) Table 6.2: Evaluación del modelo ARIMA por índice bursátil (basado en el ajuste histórico) Indice MAE RMSE MAPE SP500 0.01 0.01 0.10 DowJones 244.91 355.57 0.77 Nasdaq 0.01 0.02 0.11 DAX 122.06 174.66 140.19 CAC40 51.20 72.43 0.82 FTSE100 48.18 70.49 0.68 Nikkei225 0.01 0.01 0.09 HangSeng 244.45 336.89 1.10 ShanghaiComposite 23.77 34.41 0.75 "],["modelo-prophet.html", "Chapter 7 Modelo Prophet 7.1 Análisis de modelo Prophet. 7.2 Implementación de lógicas y funciones para Prophet. 7.3 Implementación a todas las series de tiempo mediante ciclos iterativos 7.4 Tabla de resumen", " Chapter 7 Modelo Prophet En este proyecto, Prophet se empleó como alternativa robusta frente a modelos clásicos como Holt-Winters y ARIMA, debido a su capacidad para: 1. Adaptarse automáticamente a cambios de tendencia. 2. Capturar estacionalidades complejas sin requerir diferenciación previa. 3. Generar intervalos de confianza para la predicción. 4. Trabajar bien incluso con series no estacionarias o con efectos de fin de semana. Proceso implementado Se diseñó una función iterativa en R para aplicar Prophet sobre las nueve series temporales de los principales índices bursátiles globales. El proceso incluyó: 1. Conversión de series zoo a data.frame Prophet con columnas ds (fecha) y y (precio). 2. Ajuste del modelo Prophet mediante la función prophet(). 3. Generación de predicciones a 30 días con make_future_dataframe() y predict(). Visualización del ajuste y forecast: Se mostró el gráfico con los valores observados, la predicción (línea azul) y las bandas de confianza al 80% y 95%. Se graficaron también los componentes de la regresión: tendencia, estacionalidad semanal y anual. Evaluación de desempeño Se calcularon las métricas MAE, RMSE y MAPE sobre el ajuste histórico. Almacenamiento de resultados para cada índice en una lista estructurada que permite su análisis posterior. 7.1 Análisis de modelo Prophet. 1. SP500 (Estados Unidos) Tendencia: Claramente creciente, con inflexión negativa en 2022 y repunte sostenido en 2024. Estacionalidad semanal: Fuerte alza los lunes, caídas el domingo y sábado. Patrón de apertura optimista. Estacionalidad anual: Pico en enero y octubre; caídas hacia abril. Corresponde a ciclos financieros globales. Pronóstico: Se proyecta una continuación del crecimiento. Las bandas de confianza son estrechas, lo que indica alta certidumbre en la predicción a corto plazo. Desempeño: MAE: 157.3 RMSE: 205.8 MAPE: 3.99% → Muy buen ajuste 2. Dow Jones (Estados Unidos) Tendencia: Ascenso constante, con altibajos en 2022. Comportamiento robusto hasta 2025. Estacionalidad semanal: Lunes y viernes positivos, sábado negativo. Consistente con los patrones bursátiles occidentales. Estacionalidad anual: Alta oscilación, con picos a principios y finales de año. Pronóstico: Continua la tendencia creciente con alta confianza. La predicción es suave y sigue el patrón histórico. Desempeño: MAE: 1096.5 RMSE: 1484.5 MAPE: 3.48% → Excelente predicción considerando la magnitud del índice 3. Nasdaq (Estados Unidos) Tendencia: Subida intensa durante 2020-2021 (boom tecnológico), corrección en 2022, nuevo crecimiento hasta 2025. Estacionalidad semanal: Máximos en lunes, bajones en fin de semana. Estacionalidad anual: Alta actividad en enero, abril y octubre. Pronóstico: Se anticipa crecimiento con leve oscilación. Las bandas son moderadas, lo que implica confianza razonable. Desempeño: MAE: 648.9 RMSE: 836.6 MAPE: 5.29% → Buena capacidad, aunque menor que SP500 4. DAX (Alemania) Tendencia: Fluctuante con una fuerte caída en 2020 y una recuperación prolongada hasta 2025. Estacionalidad semanal: Miércoles positivos, lunes negativos. Patrón distinto al estadounidense. Estacionalidad anual: Suave, con caídas en el segundo semestre. Pronóstico: Predice crecimiento sostenido. Las bandas de confianza son más anchas, reflejando mayor incertidumbre estructural. Desempeño: MAE: 582.4 RMSE: 799.1 MAPE: 4.07% → Ajuste adecuado, pero con variabilidad significativa 5. CAC 40 (Francia) Tendencia: Crecimiento constante con estancamiento moderado desde 2024. Estacionalidad semanal: Lunes muy positivo, fin de semana negativo. Estacionalidad anual: Claras caídas en el tercer trimestre. Pronóstico: El modelo proyecta estabilización del índice, sin rupturas abruptas. Bandas de confianza son relativamente estrechas. Desempeño: MAE: 245.4 RMSE: 325.7 MAPE: 3.96% → Buen ajuste, especialmente en trayectorias suaves 6. FTSE 100 (Reino Unido) Tendencia: Recuperación lenta post-Brexit y COVID-19, pero sostenida hasta 2025. Estacionalidad semanal: Más plana, pero lunes y viernes destacan como días positivos. Estacionalidad anual: Caída leve a mediados de año, recuperación hacia diciembre. Pronóstico: Tendencia alcista con menor pendiente que los índices estadounidenses. Las bandas de confianza son muy controladas, lo que muestra alta estabilidad. Desempeño: MAE: 204.8 RMSE: 302.9 MAPE: 2.84% → Excelente predicción Nikkei 225 (Japón) Tendencia: Tendencia positiva con rupturas en 2020 y 2023 (posibles intervenciones económicas). Estacionalidad semanal: Patrón fuerte en lunes-martes, negativo en sábado. Estacionalidad anual: Ondulaciones claras con buena periodicidad. Pronóstico: Se proyecta una continuidad de la tendencia con leve desaceleración. Las bandas son estrechas, lo cual es positivo. Desempeño: MAE: 1176.8 RMSE: 1558.6 MAPE: 4.22% → Buen ajuste, estable a pesar de choques 8. Hang Seng (Hong Kong) Tendencia: Estructuralmente descendente hasta 2023, con ligera recuperación en 2024. Estacionalidad semanal: Fuertemente negativa en fines de semana. Estacionalidad anual: Alta oscilación, reflejo de la volatilidad política y económica de la región. Pronóstico: El modelo sugiere una recuperación débil. Las bandas son anchas, reflejando incertidumbre elevada. Desempeño: MAE: 1057.9 RMSE: 1313.9 MAPE: 4.77% → Ajuste moderado, con posibles desviaciones 9. Shanghai Composite (China) Tendencia: Sin una dirección fuerte; presenta ciclos internos controlados. Estacionalidad semanal: Comportamiento regular, sin grandes picos. Estacionalidad anual: Oscilaciones menores, propias de un mercado regulado. Pronóstico: Se proyecta una continuación de la estabilidad con leve crecimiento. Bandas de confianza estrechas, lo que sugiere alta confiabilidad. Desempeño: MAE: 100.2 RMSE: 132.3 MAPE: 3.26% → Muy buen rendimiento en entorno estable 7.2 Implementación de lógicas y funciones para Prophet. Code # Inicializamos estructuras resultados_prophet &lt;- list() graficos_prophet &lt;- list() metricas_prophet &lt;- data.frame( Indice = character(), MAE = numeric(), RMSE = numeric(), MAPE = numeric(), stringsAsFactors = FALSE ) # Función para ajustar Prophet y graficar ajustar_prophet &lt;- function(serie_zoo, nombre_indice) { cat(&quot;\\n\\n=========== PROPHET -&quot;, nombre_indice, &quot;===========\\n&quot;) # Paso 1: convertir a data.frame df &lt;- data.frame( ds = index(serie_zoo), y = as.numeric(serie_zoo) ) df &lt;- na.omit(df) # Paso 2: ajustar modelo modelo &lt;- prophet(df) # Paso 3: crear marco de fechas futuras y predecir futuro &lt;- make_future_dataframe(modelo, periods = 30) pronostico &lt;- predict(modelo, futuro) # Paso 4: guardar gráfico principal de predicción grafico_prediccion &lt;- plot(modelo, pronostico) + ggtitle(paste(&quot;Pronóstico Prophet -&quot;, nombre_indice)) print(grafico_prediccion) # Mostrar el gráfico en RMarkdown # Paso 5: mostrar componentes (estacionalidad, tendencia) prophet_plot_components(modelo, pronostico) # Paso 6: calcular métricas de ajuste obs &lt;- df$y pred &lt;- tail(pronostico$yhat, length(obs)) mae_val &lt;- mae(obs, pred) rmse_val &lt;- rmse(obs, pred) mape_val &lt;- mape(obs, pred) * 100 # Imprimir métricas cat(&quot;MAE:&quot;, round(mae_val, 3), &quot;- RMSE:&quot;, round(rmse_val, 3), &quot;- MAPE:&quot;, round(mape_val, 3), &quot;%\\n&quot;) # Paso 7: guardar resultados resultados_prophet[[nombre_indice]] &lt;&lt;- list( modelo = modelo, forecast = pronostico, grafico = grafico_prediccion, metrics = c(MAE = mae_val, RMSE = rmse_val, MAPE = mape_val) ) graficos_prophet[[nombre_indice]] &lt;&lt;- grafico_prediccion metricas_prophet &lt;&lt;- rbind(metricas_prophet, data.frame( Indice = nombre_indice, MAE = round(mae_val, 3), RMSE = round(rmse_val, 3), MAPE = round(mape_val, 3) )) } 7.3 Implementación a todas las series de tiempo mediante ciclos iterativos Code # Aplicar modelo Prophet a cada índice bursátil for (indice in nombres_indices) { ajustar_prophet(cierres_zoo[[indice]], indice) } ## ## ## =========== PROPHET - SP500 =========== ## MAE: 156.767 - RMSE: 203.487 - MAPE: 3.963 % ## ## ## =========== PROPHET - DowJones =========== ## MAE: 1090.407 - RMSE: 1473.167 - MAPE: 3.456 % ## ## ## =========== PROPHET - Nasdaq =========== ## MAE: 642.979 - RMSE: 827.079 - MAPE: 5.232 % ## ## ## =========== PROPHET - DAX =========== ## MAE: 581.149 - RMSE: 800.236 - MAPE: 4.027 % ## ## ## =========== PROPHET - CAC40 =========== ## MAE: 242.641 - RMSE: 321.738 - MAPE: 3.903 % ## ## ## =========== PROPHET - FTSE100 =========== ## MAE: 202.55 - RMSE: 302.802 - MAPE: 2.809 % ## ## ## =========== PROPHET - Nikkei225 =========== ## MAE: 1137.064 - RMSE: 1502.778 - MAPE: 4.094 % ## ## ## =========== PROPHET - HangSeng =========== ## MAE: 1073.443 - RMSE: 1331.549 - MAPE: 4.853 % ## ## ## =========== PROPHET - ShanghaiComposite =========== ## MAE: 100.057 - RMSE: 131.857 - MAPE: 3.248 % 7.4 Tabla de resumen Code # Mostrar tabla con las métricas de Prophet por índice knitr::kable( metricas_prophet, caption = &quot;Evaluación del modelo Prophet por índice bursátil (basado en el ajuste histórico)&quot; ) Table 7.1: Evaluación del modelo Prophet por índice bursátil (basado en el ajuste histórico) Indice MAE RMSE MAPE SP500 156.767 203.487 3.963 DowJones 1090.407 1473.167 3.456 Nasdaq 642.979 827.079 5.232 DAX 581.149 800.236 4.027 CAC40 242.641 321.738 3.903 FTSE100 202.550 302.802 2.809 Nikkei225 1137.064 1502.778 4.094 HangSeng 1073.443 1331.549 4.853 ShanghaiComposite 100.057 131.857 3.248 "],["elman---jordan.html", "Chapter 8 ELMAN - JORDAN 8.1 Implementación 8.2 Resumen e interpretación de las gráficas y resultados de las funciones.", " Chapter 8 ELMAN - JORDAN 8.1 Implementación Se utiliza RSNNS para las redes recurrentes clásicas (Elman y Jordan), Metrics para errores, ggplot2 para visualización, dplyr / tibble para manipulación de tablas y zoo para las series temporales de cierres diarios. El particionamiento se realizó de la siguiente forma: 70% entrenamiento, 15% validación temprana y 15% prueba. Para el escalado de utilizó Z-score. Se realizó la validación de hiperparametros de forma independiente con el resultado que la mejor combinación es: Size (Numero de neuronas entrenadas): 25. lr (Learning rate):0.01 Maxix(Épocas máximas):400. Se implementó un Lag de 12 observaciones y para las métricas de medición se utilizáron las siguientes: MAE, RMSE y MAPE. 8.2 Resumen e interpretación de las gráficas y resultados de las funciones. 1. S&amp;P 500 Predicción: Ambas redes proyectan un ligero descenso en los próximos 30 días, pero con trayectorias distintas. La red Elman sugiere una pendiente negativa más marcada, mientras que Jordan predice una meseta con una leve inclinación bajista. Esta diferencia refleja el modo en que cada red captura la reciente desaceleración tras el máximo histórico. El pronóstico de Jordan parece más conservador y suavizado, en línea con el comportamiento oscilante reciente del índice. Métricas: El modelo Jordan obtiene mejores resultados con un MAE de 0.0114 frente a 0.0127 en Elman, y un RMSE de 0.0163 frente a 0.0201. La reducción del error cuadrático medio en un 19% indica que Jordan logra ajustarse con mayor precisión a los cambios leves del S&amp;P 500. Sin embargo, el MAPE es superior en Jordan (749%) frente a 507% en Elman, probablemente por retornos muy cercanos a cero en ciertos días, lo que distorsiona este indicador. 2. Dow Jones Predicción: Elman muestra una corrección moderada con un descenso progresivo, en línea con la estructura de máximos descendentes observada en semanas recientes. Jordan, en cambio, proyecta una recuperación más agresiva, que resulta menos coherente con la pérdida de momentum del índice. Visualmente, Elman ofrece una curva más realista y anclada a la tendencia reciente. Métricas: Pese a que Elman genera una curva más plausible, también obtiene mejores métricas: MAE de 0.0115 frente a 0.0210 de Jordan, y RMSE de 0.0187 frente a 0.0273. El MAPE de Jordan (1905%) sugiere que el modelo amplificó variaciones pequeñas generando valores extremos. Elman, con un MAPE de 395%, demuestra mayor estabilidad. Aquí Elman es el claro ganador. 3. Nasdaq-100 Predicción: Elman proyecta una continuidad alcista, coherente con el impulso en empresas tecnológicas, aunque con cierta exageración en el ritmo. Jordan suaviza esta proyección, planteando una oscilación lateral con leve tendencia positiva. Visualmente, el pronóstico de Jordan luce más robusto al evitar sobreestimaciones. Métricas: Ambos modelos están muy cercanos. Elman obtiene un MAE de 0.0177 y RMSE de 0.0261, mientras que Jordan muestra un MAE de 0.0190 y RMSE de 0.0248. Aunque Jordan logra un mejor RMSE, Elman tiene un menor MAE. El MAPE favorece ligeramente a Elman (533%) frente a 908% en Jordan. En conjunto, se trata de un escenario de rendimiento comparable, con ligera ventaja para Elman si se prioriza ajuste fino. 4. DAX Predicción: Ambas redes pronostican una caída moderada. Elman muestra una curva más articulada, con pendiente suave y variabilidad que respeta el patrón histórico. Jordan presenta una proyección más lineal, aunque algo desfasada respecto al ritmo real de corrección. La predicción de Elman se alinea mejor con la reciente toma de utilidades tras los máximos. Métricas: Elman supera a Jordan con MAE de 0.0108 vs 0.0152 y RMSE de 0.0152 vs 0.0208, reflejando una mejor aproximación al comportamiento diario. El MAPE de Elman (289%) es considerablemente inferior al de Jordan (568%), confirmando su superioridad en precisión relativa. Aquí Elman demuestra clara eficiencia. 5. CAC 40 (Francia) Predicción: Jordan genera una trayectoria más contenida, con una leve pendiente bajista que sigue el rango lateral de las últimas semanas. Elman en cambio, anticipa una corrección más pronunciada, que podría interpretarse como un sesgo pesimista. Visualmente, Jordan se adapta mejor al comportamiento estacionario del índice. Métricas: Pese a que Elman tiene un MAE ligeramente menor (0.0117 vs 0.0123), Jordan muestra un RMSE más bajo (0.0158 vs 0.0167). El MAPE de Elman (837%) es mejor que el de Jordan (1 048%), aunque ambos son elevados. La diferencia es leve; se puede argumentar que Jordan ofrece una proyección más estable, mientras Elman responde con mayor sensibilidad. 6. FTSE 100 (Reino Unido) Predicción: Ambos modelos anticipan una fase de estabilización con leve descenso, aunque Elman lo representa con mayor suavidad. Las curvas son casi paralelas, sin saltos abruptos, lo cual es razonable dado que este índice tiende a tener baja volatilidad. Jordan, sin embargo, introduce una ligera sobreestimación en los últimos días del horizonte. Métricas: Elman tiene una clara ventaja con MAE de 0.0080 frente a 0.0089 en Jordan y RMSE de 0.0121 frente a 0.0128. El MAPE (1 114% vs 1 415%) es alto en ambos casos, lo que se justifica por días con retornos extremadamente bajos. En este entorno de bajo ruido, Elman demuestra un mejor desempeño. 7. Nikkei 225 (Japón) Predicción: Ambos modelos proyectan una consolidación tras un periodo alcista fuerte. Elman muestra una curva más nerviosa con micro-variaciones, mientras que Jordan suaviza la forma, presentando una trayectoria más estable y menos reactiva. Visualmente, Jordan luce más coherente con la naturaleza de este mercado. Métricas: Jordan obtiene mejores valores en todos los indicadores: MAE de 0.0157 frente a 0.0178 en Elman, y RMSE de 0.0232 frente a 0.0283. El MAPE es también más bajo en Jordan (461%) frente a 377%, lo que es algo atípico y evidencia una mejora global en forma y magnitud. Se recomienda preferir Jordan para este mercado. 8. Hang Seng (Hong Kong) Predicción: Jordan presenta un patrón moderadamente alcista con oscilaciones leves, en línea con el repunte técnico reciente. Elman tiende a mostrar subidas más agresivas que parecen sobredimensionadas respecto al entorno macro-político que afecta esta región. Visualmente, la predicción de Elman requiere precaución por riesgo de sobreajuste. Métricas: Aunque ambos modelos muestran altos errores, Jordan tiene mejor desempeño: MAE de 0.0182 frente a 0.0186 en Elman, y RMSE de 0.0243 frente a 0.0255. El MAPE es casi igual (942% en Jordan vs 938% en Elman). Dado que los valores absolutos son tan cercanos, el criterio visual y de estabilidad favorece a Jordan. 9. Shanghai Composite (China) Predicción: Ambos modelos proyectan una leve pendiente bajista. Jordan ofrece una curva más contenida y alineada con el rango histórico entre 3 200 y 3 450 puntos. Elman, aunque no cae en sobrestimaciones, tiene más oscilaciones y cierto sesgo de alza hacia el final del horizonte, que resulta menos creíble. Métricas: Jordan mejora en todos los aspectos: MAE de 0.0117 frente a 0.0124, y RMSE de 0.0165 frente a 0.0185. El MAPE de Jordan (656%) también es inferior al de Elman (813%). Esta consistencia métrica, junto con una forma de curva más estable, hace que Jordan sea el modelo más adecuado para este índice. Code #─────────────────────────────────────────────── # 0. Paquetes #─────────────────────────────────────────────── options(repos = c(CRAN = &quot;https://cloud.r-project.org&quot;)) if (!requireNamespace(&quot;pacman&quot;, quietly = TRUE)) install.packages(&quot;pacman&quot;) pacman::p_load(RSNNS, Metrics, ggplot2, dplyr, tibble, zoo) #─────────────────────────────────────────────── # 1. Funciones auxiliares #─────────────────────────────────────────────── calc_logret &lt;- function(z) diff(log(z)) |&gt; na.omit() ## 1.1 dummies de día (lunes referencia) dow_dum &lt;- function(idx){ lev &lt;- c(&quot;Tuesday&quot;,&quot;Wednesday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;) outer(weekdays(idx), lev, &quot;==&quot;) * 1 # matriz n × 4 } ## 1.2 Ventanas: y(t) + 12 lags + 4 dummies (16 inputs) crear_ventanas &lt;- function(r, n_lag = 12){ emb_r &lt;- embed(coredata(r), n_lag + 1) idx &lt;- time(r)[(n_lag + 1):length(r)] # fechas alineadas con y(t) Xret &lt;- emb_r[, 2:(n_lag + 1)] Xdow &lt;- dow_dum(idx) df &lt;- as.data.frame(cbind(y = emb_r[,1], Xret, Xdow)) colnames(df) &lt;- c(&quot;y&quot;, paste0(&quot;lag&quot;, 1:n_lag), c(&quot;Tue&quot;,&quot;Wed&quot;,&quot;Thu&quot;,&quot;Fri&quot;)) df # cronológico asc } particionar &lt;- function(df, p_train=.70, p_val=.15){ n &lt;- nrow(df); nt &lt;- floor(n*p_train); nv &lt;- floor(n*p_val) list(train=df[1:nt,], val=df[(nt+1):(nt+nv),], test=df[(nt+nv+1):n,]) } prox_habiles &lt;- function(fecha_ini, n){ s &lt;- seq(fecha_ini + 1, by = &quot;day&quot;, length.out = n*3) s[!weekdays(s) %in% c(&quot;Saturday&quot;,&quot;Sunday&quot;)][1:n] } ## 1.3 Entrenamiento RNN entrenar_rnn &lt;- function(parts, tipo=c(&quot;elman&quot;,&quot;jordan&quot;), size=25, lr=0.01, maxit=400){ tipo &lt;- match.arg(tipo) μ &lt;- mean(parts$train$y); parts &lt;- lapply(parts,\\(d){d$y&lt;-d$y-μ;d}) σ &lt;- sd(parts$train$y); if (σ==0) σ &lt;- 1e-6 sc &lt;- \\(v) v/σ; isc &lt;- \\(v) v*σ toMat &lt;- \\(d) as.matrix(d[ , -1]) trX &lt;- sc(toMat(parts$train)); trY &lt;- sc(parts$train$y) vaX &lt;- sc(toMat(parts$val )); vaY &lt;- sc(parts$val$y) teX &lt;- sc(toMat(parts$test )); teY &lt;- parts$test$y net &lt;- if (tipo==&quot;elman&quot;){ elman (trX,trY,size,linOut=TRUE, learnFuncParams=c(lr), inputsTest=vaX,targetsTest=vaY,maxit=maxit) } else { jordan(trX,trY,size,linOut=TRUE, learnFuncParams=c(lr), inputsTest=vaX,targetsTest=vaY,maxit=maxit) } pred_te &lt;- isc(predict(net, teX)) list(net=net, sc=sc, isc=isc, clip = 2*sd(parts$train$y), # límite de clipping por índice MAE = mae (teY, pred_te), RMSE= rmse(teY, pred_te), MAPE= mape(teY, pred_te)*100) } plot_fc &lt;- function(idx, fc_price, modelo){ obs &lt;- cierres_zoo[[idx]] fechas &lt;- prox_habiles(tail(index(obs),1), length(fc_price)) bind_rows( tibble(Fecha=index(obs), Valor=as.numeric(obs), Serie=&quot;Observado&quot;), tibble(Fecha=fechas , Valor=fc_price , Serie=&quot;Pronóstico&quot;)) |&gt; ggplot(aes(Fecha,Valor,col=Serie,linetype=Serie))+ geom_line(size=.9)+ scale_color_manual(values=c(Observado=&quot;#1f77b4&quot;,Pronóstico=&quot;#d62728&quot;))+ labs(title=sprintf(&quot;Pronóstico 30 días – %s (%s)&quot;, idx, modelo), y=&quot;Precio de cierre&quot;)+theme_minimal() } #─────────────────────────────────────────────── # 2. log-retornos centrados #─────────────────────────────────────────────── logret_zoo &lt;- lapply(cierres_zoo, \\(z){ r&lt;-calc_logret(z); r-mean(r) }) names(logret_zoo) &lt;- nombres_indices #─────────────────────────────────────────────── # 3. Loop entrenamiento / forecast #─────────────────────────────────────────────── metricas_elman &lt;- tibble(); resultados_elman &lt;- list() metricas_jordan &lt;- tibble(); resultados_jordan &lt;- list() for(idx in nombres_indices){ r &lt;- logret_zoo[[idx]] if(length(r) &lt; 260){ message(idx,&quot;: pocos datos&quot;); next } df_lags &lt;- crear_ventanas(r, 12) parts &lt;- particionar(df_lags, .70, .15) ## ---------- ELMAN ---------- fitE &lt;- entrenar_rnn(parts,&quot;elman&quot;,25,.01,400) # pronóstico paso a paso (30 días hábiles) last_price &lt;- as.numeric(tail(cierres_zoo[[idx]],1)) ret_fc &lt;- numeric(30); win &lt;- tail(df_lags$y,12) next_dates &lt;- prox_habiles(time(tail(cierres_zoo[[idx]],1)), 30) for(h in seq_len(30)){ x &lt;- c(fitE$sc(win), dow_dum(next_dates[h])) r_hat &lt;- fitE$isc(predict(fitE$net, matrix(x,1))) ret_fc[h] &lt;- pmin(pmax(r_hat, -fitE$clip), fitE$clip) win &lt;- c(ret_fc[h], head(win,-1)) } resultados_elman[[idx]] &lt;- last_price*exp(cumsum(ret_fc)) metricas_elman &lt;- bind_rows(metricas_elman, tibble(Indice=idx, MAE=round(fitE$MAE,4), RMSE=round(fitE$RMSE,4), MAPE=round(fitE$MAPE,2))) ## ---------- JORDAN ---------- fitJ &lt;- entrenar_rnn(parts,&quot;jordan&quot;,25,.01,400) ret_fc &lt;- numeric(30); win &lt;- tail(df_lags$y,12) for(h in seq_len(30)){ x &lt;- c(fitJ$sc(win), dow_dum(next_dates[h])) r_hat &lt;- fitJ$isc(predict(fitJ$net, matrix(x,1))) ret_fc[h] &lt;- pmin(pmax(r_hat, -fitJ$clip), fitJ$clip) win &lt;- c(ret_fc[h], head(win,-1)) } resultados_jordan[[idx]] &lt;- last_price*exp(cumsum(ret_fc)) metricas_jordan &lt;- bind_rows(metricas_jordan, tibble(Indice=idx, MAE=round(fitJ$MAE,4), RMSE=round(fitJ$RMSE,4), MAPE=round(fitJ$MAPE,2))) } #─────────────────────────────────────────────── # 4. Tablas + gráficos #─────────────────────────────────────────────── knitr::kable(metricas_elman , caption=&quot;Rendimiento – Red ELMAN (lags+Dow)&quot;) Table 8.1: Rendimiento – Red ELMAN (lags+Dow) Indice MAE RMSE MAPE SP500 0.0127 0.0187 633.86 DowJones 0.0113 0.0162 498.51 Nasdaq 0.0180 0.0244 740.72 DAX 0.0119 0.0166 360.14 CAC40 0.0115 0.0156 399.02 FTSE100 0.0077 0.0112 460.19 Nikkei225 0.0177 0.0253 417.04 HangSeng 0.0197 0.0264 1062.43 ShanghaiComposite 0.0105 0.0170 452.39 Code knitr::kable(metricas_jordan, caption=&quot;Rendimiento – Red JORDAN (lags+Dow)&quot;) Table 8.1: Rendimiento – Red JORDAN (lags+Dow) Indice MAE RMSE MAPE SP500 0.0128 0.0176 608.78 DowJones 0.0194 0.0248 1307.06 Nasdaq 0.0179 0.0243 726.76 DAX 0.0209 0.0273 707.48 CAC40 0.0104 0.0134 433.33 FTSE100 0.0365 0.0403 2851.01 Nikkei225 0.0166 0.0230 527.69 HangSeng 0.0221 0.0303 901.19 ShanghaiComposite 0.0116 0.0175 547.23 Code for(idx in names(resultados_elman )) print(plot_fc(idx,resultados_elman [[idx]],&quot;ELMAN&quot;)) Code for(idx in names(resultados_jordan)) print(plot_fc(idx,resultados_jordan[[idx]],&quot;JORDAN&quot;)) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
